" Vimrc By Talented Unicorn 
" --------------------------

" Set terminal color to 256 color mode
set t_Co=256

" Set large history size
set history=700

" Edit
set number		" Set line number on
set showmatch		" Highlight matching brace
set visualbell		" Use visual bell (no beeping)
set autoindent		" Auto-indent new lines
set smartindent		" Enable smart-indent
set shiftwidth=4	" Auto indent spaces
set tabstop=4		" Number of spaces per tab
set wrap			" Wrap lines
set smarttab		" Enable smart-tab
set expandtab		" Convert tabs to spaces
set autoread		" Auto read when file is changed from outside
set foldenable		" Enable code folding
set foldmethod=indent	" Fold code by indent
" set relativenumber	" Show relative number

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

" Key binding
" Show Explore
map <F3> :Explore<cr> 
let mapleader = "`"
" Fast saving
nmap <leader>w :w!<cr>	

" Navigation
" - Buffers
" Previous buffer
nmap <F1> :bp!<cr>
" Next buffer
nmap <F2> :bn!<cr>
" Delete buffer - leader+dd
map <silent> <leader><delete> :bd<cr>
" Create empty buffer in current window
map <silent> <leader>n :enew<cr>	
" Press leader and space to remove highlights
map <silent> <leader><space> :noh<cr>	

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Search
set hlsearch		" Highlight search results
set smartcase		" Enable smart-case search
set ignorecase		" Ignore case in search ALWAYS
" Remove search highlights
nmap <silent> <leader>/ :nohlsearch<cr>	

set modifiable		" enable modifiable

" UI
set wildmenu		" Wild menu is on
set showmatch		" Matching brackets yeah?
set showcmd			" Show command on UI

" - Syntax highlighting
syntax enable
try
	colorscheme evening
catch
endtry

" set cshtml files to html syntax 
au BufNewFile,BufRead *.cshtml set filetype=html

" set twig syntax highlighting
au BufNewFile,BufRead *.twig set filetype=htmldjango

" - vim-airline
set laststatus=2
let g:airline#extensions#tabline#enabled = 1	" Automatically display buffers when there's only one tab open
let g:airline_powerline_fonts = 1	" Set powerline fonts
let g:airline_theme='base16_ashes' " Set airline theme
let g:airline#extensions#branch#enabled = 1	" Enable display of current branch

" - CtrlP
let g:ctrlp_custom_ignore = {
	\'dir':  '\v[\/](\.(git|hg|svn)|\Debug|\Release|node_modules|bower_components)$',
	\'file': '\v\.(exe|so|dll|class|png|jpg|jpeg|map)$',
\}

 let g:ctrlp_working_path_mode = 'r'

 let g:ctrlp_cmd = 'CtrlP'

" faster search with ag
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'

" When you press gv you Ag after the selected text
vnoremap <silent> gv :call VisualSelection('gv', '')<CR>

" Select and replace
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction 

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" vim-plug: Plugin manager
call plug#begin()

Plug 'cakebaker/scss-syntax.vim'
Plug 'othree/html5.vim'
Plug 'jelera/vim-javascript-syntax'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mattn/emmet-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-commentary'
Plug 'plasticboy/vim-markdown'
Plug 'rking/ag.vim'
Plug 'slim-template/vim-slim'
call plug#end()
